__author__ = 'Erez'
""
The method gets:
	hand- 1d array of the amount of cards the player has from each card
	lastCard- the last card played
and returns the largest size of group, and its distance from lastCard

Assumptions: The group can start from lastCard +1/ last Card or lastCard -1
	     A group is two sequences of neighbor cards with one space between them
"'
    def extractLargestGroup(self,hand,lastCard):
        j=0       # Iteration counter
        i=lastCard-1 #start searching for group before current card
        if i==0:
            i=NUM_CARD_TYPES-1
        currGroupSize=0
        lastGroupSize=0
        maxGroupSize=0
        distMaxGroup=0
        while j<NUM_CARD_TYPES+2:
            while hand[i]==0 and j<NUM_CARD_TYPES+2: #find the first card which is in the hand
                i=i+1
                if i==NUM_CARD_TYPES:
                    i=0
                j=j+1
            if j==NUM_CARD_TYPES+2:
                break

            lastGroupSize=currGroupSize
            currGroupSize=0
            dist= abs(i-lastCard)
            while hand[i]>0 and j<NUM_CARD_TYPES:
                currGroupSize=currGroupSize+hand[i]
                i=i+1
                if (i>=NUM_CARD_TYPES):
                    i=1
                j=j+1
            distLast=abs(i-lastCard)
            if dist>distLast:
                dist=distLast
            if lastGroupSize+currGroupSize>maxGroupSize:
                maxGroupSize=lastGroupSize+currGroupSize
                distMaxGroup=dist
            elif lastGroupSize+currGroupSize==maxGroupSize and dist<distMaxGroup:
                distMaxGroup=dist
        return distMaxGroup, maxGroupSize
